<?php
App::uses('AppController', 'Controller');
/**
 * Purchases Controller
 * Generated by Petit Four the online baking tool for CakePHP: http://patisserie.keensoftware.com
 * @property Purchase $Purchase
 */
class PurchasesController extends AppController {
    
    public $paginate;

/**
 * index method
 *
 * @return void
 */
	public function index() {
        
        
       // print_r($this->data);die();
        
        if($this->data['Purchase']['layout']=='print') {
            $this->layout = 'minimalist';
            $this->set("printScript",'1');
        }
		$this->Purchase->recursive = 0;
        
        
        
        if(isset($this->data['Purchase']['date_start'])) {
            // set the conditions
            
            
            
             //$dateStart =  date_create_from_format('m/d/Y', $this->data['Purchase']['date_start']); 
             //echo $dateStart;die();
             $d1 = explode("/",$this->data['Purchase']['date_start']);
             $dateStart = $d1[2]."-".$d1['0']."-".$d1[1]; 
             
             //$dateEnd =  date_create_from_format('m/d/y', $this->data['Purchase']['dateEnd']); 
             $d1 = explode("/",$this->data['Purchase']['date_end']);
             $dateEnd = $d1[2]."-".$d1['0']."-".$d1[1]; 
             
             //echo $dateEnd; die();
             if($this->data['Purchase']['date_end']=="") {$dateEnd=$dateStart;}
             $this->paginate['conditions'][] = array(
                            'AND' => array(
                                'Purchase.purchase_date >=' => "$dateStart",
                                'Purchase.purchase_date <=' => "$dateEnd",
                            )
                        );            
            
           // print_r($this->paginate['conditions']);die();
            // set the Search data, so the form remembers the option
            $this->data['Search']['date_start'] = $this->passedArgs['Search.date_start'];

            // set the Page Title (not required)
            $title[] = 'לפי תאריכים: '.$this->passedArgs['Search.date_start'];
        } 
        
		$this->set('Purchases', $this->paginate());
	}

/**
 * view method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */
	public function view($id = null) {
		if (!$this->Purchase->exists($id)) {
			throw new NotFoundException(__('Invalid Purchase'));
		}
		$options = array('conditions' => array('Purchase.' . $this->Purchase->primaryKey => $id));
		$this->set('Purchase', $this->Purchase->find('first', $options));
	}

/**
 * add method
 *
 * @return void
 */
	public function add() {
		if ($this->request->is('post')) {
			$this->Purchase->create();
			if ($this->Purchase->save($this->request->data)) {
				$this->Session->setFlash(__('The Purchase has been saved'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The Purchase could not be saved. Please, try again.'));
			}
		}
	}

/**
 * edit method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */
	public function edit($id = null) {
 		if (!$this->Purchase->exists($id)) {
			throw new NotFoundException(__('Invalid Purchase'));
		}
		if ($this->request->is('post') || $this->request->is('put')) {
			if ($this->Purchase->save($this->request->data)) {
				$this->Session->setFlash(__('The Purchase has been saved'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The Purchase could not be saved. Please, try again.'));
			}
		} else {
			$options = array('conditions' => array('Purchase.' . $this->Purchase->primaryKey => $id));
			$this->request->data = $this->Purchase->find('first', $options);
		}
	}

/**
 * delete method
 *
 * @throws NotFoundException
 * @throws MethodNotAllowedException
 * @param int id
 * @return void
 */
	public function delete($id = null) {
		$this->Purchase->id = $id;
		if (!$this->Purchase->exists()) {
			throw new NotFoundException(__('Invalid Purchase'));
		}
		$this->request->onlyAllow('post', 'delete');
		if ($this->Purchase->delete()) {
			$this->Session->setFlash(__('The Purchase has been deleted.'));
		} else {
			$this->Session->setFlash(__('The Purchase could not be deleted. Please, try again.'));
		}
		return $this->redirect(array('action' => 'index'));
	}
}
