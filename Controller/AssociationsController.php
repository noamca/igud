<?php
App::uses('AppController', 'Controller');
/**
 * Associations Controller
 * Generated by Petit Four the online baking tool for CakePHP: http://patisserie.keensoftware.com
 * @property Association $Association
 */
class AssociationsController extends AppController {

/**
 * index method
 *
 * @return void
 */
 
 
    public $paginate ;
 
    public function beforeFilter() {
        parent::beforeFilter();
    }
    
    
    
    
	public function index() {
		$this->Association->recursive = 0;
        
        if(isset($this->passedArgs['Search.names'])) {
            // set the conditions
         //   echo $this->passedArgs['Search.names']; die();
             $keywords = $this->passedArgs['Search.names']; 
             $this->paginate['conditions'][] = array(
                            'OR' => array(
                                'Association.name LIKE' => "%$keywords%",
                                'Association.name_eng LIKE' => "%$keywords%",
                                'Association.tv_display_name LIKE' => "%$keywords%",
                                'Association.short_name LIKE' => "%$keywords%",
                                
                            )
                        );            
            
            //print_r($this->paginate);die();
            // set the Search data, so the form remembers the option
            $this->data['Search']['names'] = $this->passedArgs['Search.names'];

            // set the Page Title (not required)
            $title[] = 'לפי שם כללי: '.$this->passedArgs['Search.names'];
        } 
        //print_r($this->paginate['conditions']); die();
		$this->set('associations', $this->paginate());
	}
    
    public function dashboard() {
        
    }

/**
 * view method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */
	public function view($id = null) {
		if (!$this->Association->exists($id)) {
			throw new NotFoundException(__('Invalid association'));
		}
		$options = array('conditions' => array('Association.' . $this->Association->primaryKey => $id));
		$this->set('association', $this->Association->find('first', $options));
	}

/**
 * add method
 *
 * @return void
 */
	public function add() {
		if ($this->request->is('post')) {
			$this->Association->create();
			if ($this->Association->save($this->request->data)) {
				$this->Session->setFlash(__('The association has been saved'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The association could not be saved. Please, try again.'));
			}
		}
	}

/**
 * edit method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */
	public function edit($id = null) {
        
        
        
		if (!$this->Association->exists($id)) {
			throw new NotFoundException(__('Invalid association'));
		}
		if ($this->request->is('post') || $this->request->is('put')) {
			if ($this->Association->save($this->request->data)) {
				$this->Session->setFlash(__('The association has been saved'));
                
                // saving leages
                
                $leages = $this->Association->AssociationsHistory->findByYearAndAssociationId($this->workingYear,$id);
                
                $this->request->data['AssociationsHistory']= array(
                    'year' => $this->workingYear,
                    'association_id' => $id,
                    'm1' =>  $this->request->data['Association']['leage1'],
                    'm2' =>  $this->request->data['Association']['leage2'],
                    'm3' =>  $this->request->data['Association']['leage3'],
                    'm4' =>  $this->request->data['Association']['leage4'],
                    'w1' =>  $this->request->data['Association']['leage5'],
                    'w2' =>  $this->request->data['Association']['leage6'],
                    'w3' =>  $this->request->data['Association']['leage7'],
                    'w4' =>  $this->request->data['Association']['leage8'],
                    
                ); 
                if(count($leages) == 0) {
                    $this->Association->AssociationsHistory->create();
                }
                else {
                    //print_r($leages); die();
                    $this->request->data['AssociationsHistory']['id'] = $leages['AssociationsHistory']['id'];
                }
                $this->Association->AssociationsHistory->save($this->request->data);
                
				return $this->redirect(array('action' => 'edit/'.$id));
                
			} else {
				$this->Session->setFlash(__('The association could not be saved. Please, try again.'));
			}
		} else {
			$options = array('conditions' => array('Association.' . $this->Association->primaryKey => $id),'limit'=>0);
			$this->request->data = $this->Association->find('first', $options);
            //print_r($this->request->data);
            $this->set("accountings",$this->request->data["Accounting"]);
            $this->set("Athlets",$this->request->data["Athlet"]);
            $this->set("remarks",$this->request->data["Remark"]);
            $this->set("addresses",$this->request->data["Address"]);
            $this->set('currentLeages',$this->Association->AssociationsHistory->findByYearAndAssociationId($this->workingYear,$id));
            //print_r($this->Association->AssociationsHistory->findByYearAndAssociationId($this->workingYear,$id));
            $this->set('associationsHistories',$this->request->data["AssociationsHistory"]);
            $this->set('associationsList' , $this->Association->find('list'));
            $this->set('entity_id',$id);
            
            
            // for remarks we expose entity type
            $this->set('entity_type','Association');
            
            
            
            
		}
	}

/**
 * delete method
 *
 * @throws NotFoundException
 * @throws MethodNotAllowedException
 * @param int id
 * @return void
 */
	public function delete($id = null) {
		$this->Association->id = $id;
		if (!$this->Association->exists()) {
			throw new NotFoundException(__('Invalid association'));
		}
		$this->request->onlyAllow('post', 'delete');
		if ($this->Association->delete()) {
			$this->Session->setFlash(__('The association has been deleted.'));
		} else {
			$this->Session->setFlash(__('The association could not be deleted. Please, try again.'));
		}
		return $this->redirect(array('action' => 'index'));
	}
}
