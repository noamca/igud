<?php
App::uses('AppController', 'Controller');
/**
 * Competitions Controller
 * Generated by Petit Four the online baking tool for CakePHP: http://patisserie.keensoftware.com
 * @property Competition $Competition
 */
class CompetitionsController extends AppController {

/**
 * index method
 *
 * @return void
 */
 
 
    var $uses = array('Competition','Purchase') ;  
    
    
    public function beforeFilter() {
        if(!session_id()) session_start();
        $this->Auth->allow( 'register', 'success_register' ,'fail_register','notify');
    }
    
	public function index() {
		$this->Competition->recursive = 0;
		$this->set('competitions', $this->paginate());
	}
    
    
    public function register() {
        $this->layout=false;
        $this->render("/Elements/runisrael/register/");
    }
    
    
    public function success_register() {
        
       $email = $_POST['email'];
       $name= $_POST['firstName']." ".$POST['lastName'];
       $prd = $_POST['pdesc'];
       $sum = $_POST['sum'];
       $trn = $_POST['ConfirmationCode'];
       $emailmsg = "$name שלום,<br> 
        אנו מודים לך על רכישת הכרטיסים<br>
        להלן פירוט העסקה:<BR>
        $prd <BR>
        סכום חיוב : $sum שח<BR>
        מספר אישור עסקה : $trn <BR>
         <BR>
         <BR>
         <BR>
         את הכרטיסים ניתן לאסוף במשרדי איגוד האתלטיקה ברחוב שיטרית 10 תל אביב, ו/או בימי התחרות בקופה, בכניסה לאצטדיון האתלטיקה בהדר-יוסף, החל מהשעה 17:30, בימי התחרויות.
        
        
        
        ";
       $emailmsg.= " ";
       
       
       
        
       $this->layout="basic"; 
       $this->set('msg','אנו מודים לך על רכישת הכרטיסים, אישור העסקה נשלח אלייך באימייל <br><br> <BR>
         את הכרטיסים ניתן לאסוף במשרדי איגוד האתלטיקה ברחוב שיטרית 10 תל אביב, ו/או בימי התחרות בקופה, בכניסה לאצטדיון האתלטיקה בהדר-יוסף, החל מהשעה 17:30, בימי התחרויות.
        ');
       $headers = "MIME-Version: 1.0" . "\r\n";
       $headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";
       $subject = "רכישת כרטיסים לאליפות ישראל באתלטיקה";
       $newsubject='=?UTF-8?B?'.base64_encode($subject).'?=';
       $a = mail( $email , $newsubject, $emailmsg,$headers );
      // print_r($_POST); 
      
       
       
       
    }
    
    public function fail_register() {
        $this->layout="basic"; 
       $this->set('msg','העסקה לא בוצעה וכרטיס האשראי שלך לא חויב בשל בעיה טכנית');
        
    }
    
    public function notify() {
        
       // $_POST = $_GET;
        $this->layout="basic"; 
        $transaction = var_export($_POST,true);
        //echo $transaction;
        $fh = fopen(LOG_PATH,'a');
        fwrite($fh,$transaction);
        fclose($fh);
        $this->request->data['Purchase']['identity'] = $_POST['myid'];
        $this->request->data['Purchase']['purchase_date'] = date('Y-m-d');
        $this->request->data['Purchase']['first_name'] = $_POST['firstName'];
        $this->request->data['Purchase']['last_name'] = $_POST['lastName'];
        $this->request->data['Purchase']['prd_desc'] = $_POST['pdesc'];
        $this->request->data['Purchase']['total_amount'] = $_POST['sum'];
        $this->request->data['Purchase']['confirmation_number'] = $_POST['ConfirmationCode'];
        $this->request->data['Purchase']['phone'] = $_POST['phone'];
        $this->request->data['Purchase']['campaign_id'] = $_POST['campaign_id'];
        $this->request->data['Purchase']['supplier'] = $_POST['supplier'];
        $this->request->data['Purchase']['email'] = $_POST['email'];
        
        
        $this->Purchase->create();
        $this->Purchase->save($this->request->data);
        
        die();
        
  
        
        
        
    }
    
    

/**
 * view method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */
	public function view($id = null) {
		if (!$this->Competition->exists($id)) {
			throw new NotFoundException(__('Invalid competition'));
		}
		$options = array('conditions' => array('Competition.' . $this->Competition->primaryKey => $id));
		$this->set('competition', $this->Competition->find('first', $options));
	}

/**
 * add method
 *
 * @return void
 */
	public function add() {
		if ($this->request->is('post')) {
			$this->Competition->create();
			if ($this->Competition->save($this->request->data)) {
				$this->Session->setFlash(__('The competition has been saved'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The competition could not be saved. Please, try again.'));
			}
		}
		$professions = $this->Competition->Profession->find('list');
		$this->set(compact('professions'));
	}

/**
 * edit method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */
	public function edit($id = null) {
		if (!$this->Competition->exists($id)) {
			throw new NotFoundException(__('Invalid competition'));
		}
		if ($this->request->is('post') || $this->request->is('put')) {
			if ($this->Competition->save($this->request->data)) {
				$this->Session->setFlash(__('The competition has been saved'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The competition could not be saved. Please, try again.'));
			}
		} else {
			$options = array('conditions' => array('Competition.' . $this->Competition->primaryKey => $id));
			$this->request->data = $this->Competition->find('first', $options);
		}
		$professions = $this->Competition->Profession->find('list');
		$this->set(compact('professions'));
	}

/**
 * delete method
 *
 * @throws NotFoundException
 * @throws MethodNotAllowedException
 * @param int id
 * @return void
 */
	public function delete($id = null) {
		$this->Competition->id = $id;
		if (!$this->Competition->exists()) {
			throw new NotFoundException(__('Invalid competition'));
		}
		$this->request->onlyAllow('post', 'delete');
		if ($this->Competition->delete()) {
			$this->Session->setFlash(__('The competition has been deleted.'));
		} else {
			$this->Session->setFlash(__('The competition could not be deleted. Please, try again.'));
		}
		return $this->redirect(array('action' => 'index'));
	}
}
