<?php

App::uses('AppController', 'Controller');

                                                   
/**
 * Athlets Controller
 * Generated by Petit Four the online baking tool for CakePHP: http://patisserie.keensoftware.com
 * @property Athlet $Athlet
 */
class AthletsController extends AppController {
    
    
    public $paginate ;
    public $title;
    
    var $actsAs = array( 'Containable' );
    var $uses = array('Athlet','Tbl') ;
    
    
    public function beforeFilter() {
        
        parent::beforeFilter();
        $this->response->header('Access-Control-Allow-Origin','*');
        $this->response->header('Access-Control-Allow-Methods','*');
        $this->response->header('Access-Control-Allow-Headers','X-Requested-With');
        $this->response->header('Access-Control-Allow-Headers','Content-Type, x-xsrf-token');
        $this->response->header('Access-Control-Max-Age','172800');  
                
        
                
        $this->set('healthAssociations' , $this->Tbl->find('list',array(
        'conditions' => array('Tbl.tbl'=>"health_org"),
        'fields' => array('Tbl.code', 'Tbl.description')
        )));
        $this->set('familyStatuses' , $this->Tbl->find('list',array(
        'conditions' => array('Tbl.tbl'=>"fam_stat"),
        'fields' => array('Tbl.code', 'Tbl.description')
        )));   
        $this->set('army' , $this->Tbl->find('list',array(
        'conditions' => array('Tbl.tbl'=>"army"),
        'fields' => array('Tbl.code', 'Tbl.description')
        )));                   
   }
    

/**
 * index method
 *
 * @return void
 */                                                   
	public function index() {
		$this->Athlet->recursive = 0;
        
        if(isset($this->passedArgs['Search.personal_identity_number'])) {
            // set the conditions
            $this->paginate['conditions'][]['Athlet.personal_identity_number'] = $this->passedArgs['Search.personal_identity_number'];

            // set the Search data, so the form remembers the option
            $this->data['Search']['personal_identity_number'] = $this->passedArgs['Search.personal_identity_number'];

            // set the Page Title (not required)
            $title[] = 'תעודת זהות: '.$this->passedArgs['Search.personal_identity_number'];
        } 
        if(isset($this->passedArgs['Search.names'])) {
            // set the conditions
             $keywords = $this->passedArgs['Search.names']; 
             $this->paginate['conditions'][] = array(
                            'OR' => array(
                                'Athlet.first_name LIKE' => "%$keywords%",
                                'Athlet.last_name LIKE' => "%$keywords%",
                                'Athlet.first_name_eng LIKE' => "%$keywords%",
                                'Athlet.last_name_eng LIKE' => "%$keywords%",
                                
                            )
                        );            
            

            // set the Search data, so the form remembers the option
            $this->data['Search']['names'] = $this->passedArgs['Search.names'];

            // set the Page Title (not required)
            $title[] = 'לפי שם פרטי או משפחה: '.$this->passedArgs['Search.names'];
        } 

        
        
        $this->paginate['limit'] = 10;  
        
		$this->set('Athlets', $this->paginate());
    
	}
    
    

/**
 * view method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */
	public function view($id = null) {
		if (!$this->Athlet->exists($id)) {
			throw new NotFoundException(__('Invalid Athlet'));
		}
		$options = array('conditions' => array('Athlet.' . $this->Athlet->primaryKey => $id));
		$this->set('Athlet', $this->Athlet->find('first', $options));
	}

/**
 * add method
 *
 * @return void
 */
	public function add() {
		if ($this->request->is('post')) {
			$this->Athlet->create();
			if ($this->Athlet->save($this->request->data)) {
				$this->Session->setFlash(__('The Athlet has been saved'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The Athlet could not be saved. Please, try again.'));
			}
		}
		$associations = $this->Athlet->Association->find('list');
		$this->set(compact('associations'));
	}

/**
 * edit method
 *
 * @throws NotFoundException
 * @param int id
 * @return void
 */
	public function edit($id = null) {
        
        $this->Athlet->recursive = 1;
		if (!$this->Athlet->exists($id)) {
			throw new NotFoundException(__('Invalid Athlet'));
		}
		if ($this->request->is('post') || $this->request->is('put')) {
			if ($this->Athlet->save($this->request->data)) {
				$this->Session->setFlash(__('The Athlet has been saved'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Session->setFlash(__('The Athlet could not be saved. Please, try again.'));
			}
		} else {
			$options = array('conditions' => array('Athlet.' . $this->Athlet->primaryKey => $id));
			$this->request->data = $this->Athlet->find('first', $options);
		}
        
		$associations =  $this->Athlet->Association->find('list');
        $accountings = $this->Athlet->Accounting->findAllByIdentityNumberAndEntityType($id,'Athlet');
        $chestNumbers = $this->Athlet->ChestNumber->findAllByIdentityNumber($id);
        $remarksAry = $this->Athlet->Remarks->findAllByIdentityNumberAndEntityType($id,'Athlet');
        // fix remarks array to suit remarks element
        foreach ($remarksAry as $key => $remark) {
            $remarks[] = $remark['Remarks']; 
        }
        $specialVacations = $this->Athlet->SpecialVacations->findAllByIdentityNumber($id);
        $AthletsMedicalTests = $this->Athlet->AthletsMedicalTest->findAllByIdentityNumber($id);
        $healthAssosiations = $this->Tbl->findAllByTbl("health_org",array('id','description'));
        //print_r($accountings);
 		$this->set(compact('associations','chestNumbers','remarks','specialVacations','AthletsMedicalTests','accountings','healthAssosiations'));
        $this->set('data',$this->data['Athlet']);
        $this->set('addresses',$this->data['Athlet']['Address']);
        
        // for remarks we expose entity type
        $this->set('entity_type','Athlet');

        
        
        
                                                
        
	}

/**
 * delete method
 *
 * @throws NotFoundException
 * @throws MethodNotAllowedException
 * @param int id
 * @return void
 */
	public function delete($id = null) {
		$this->Athlet->id = $id;
		if (!$this->Athlet->exists()) {
			throw new NotFoundException(__('Invalid Athlet'));
		}
		$this->request->onlyAllow('post', 'delete');
		if ($this->Athlet->delete()) {
			$this->Session->setFlash(__('The Athlet has been deleted.'));
		} else {
			$this->Session->setFlash(__('The Athlet could not be deleted. Please, try again.'));
		}
		return $this->redirect(array('action' => 'index'));
	}
}
